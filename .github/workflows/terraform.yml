name: Terraform CI/CD Pipeline

on:
  push:
    branches:
      - develop  # Run on push to develop branch (for dev environment)
      - main     # Run on push to main branch (for prod environment)
  pull_request:
    branches:
      - develop  # Run on pull requests targeting the develop branch (for dev environment)
      - main     # Run on pull requests targeting the main branch (for prod environment)

jobs:
  terraform:
    runs-on: ubuntu-latest

    # Dynamically set the environment based on the branch (develop or main)
    environment: ${{ github.ref == 'refs/heads/develop' && 'dev' || 'prod' }} 

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up AWS CLI with credentials from GitHub Secrets
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}  # You can set the region in Secrets or hardcode it

      # Step 3: Set up Terraform (if not already installed on the runner)
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.0  # Specify the Terraform version you want to use

      # Step 4: Set environment variables from GitHub Secrets for Terraform
      - name: Set Terraform Environment Variables
        run: |
          echo "TF_VAR_password=${{ secrets.PASSWORD }}" >> $GITHUB_ENV
          echo "TF_VAR_role_arn=${{ secrets.ROLE_ARN }}" >> $GITHUB_ENV
          echo "TF_VAR_db_password=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV

      # Step 5: Terraform Init (with different backend config based on environment)
      - name: Terraform Init
        run: |
          if [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            terraform init --backend-config=./config/dev-backend-config.hcl
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            terraform init --backend-config=./config/prod-backend-config.hcl
          fi

      # Step 6: Apply Terraform formatting if needed
      - name: Terraform Format
        run: terraform fmt

      # Step 7: Terraform Plan (creating a plan file with the correct variable file based on the environment)
      - name: Terraform Plan
        run: |
          if [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            terraform plan -out dev-tfplan -var-file="./variables/dev.tfvars" -input=false
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            terraform plan -out prod-tfplan -var-file="./variables/prod.tfvars" -input=false
          fi

      # Step 8: Terraform Apply (apply the plan to AWS with the correct plan file)
      - name: Terraform Apply
        run: |
          if [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            terraform apply dev-tfplan -auto-approve -input=false
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            terraform apply prod-tfplan -auto-approve -input=false
          fi
